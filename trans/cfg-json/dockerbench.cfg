{
  "DockerbenchSecurity": "1.3.5",
  "Tests": [
    {
      "Id": "1",
      "Desc": "Docker主机配置",
      "Checks": [
        {
          "Id": "1.1.1",
          "Desc": "加固容器宿主机 (不计评分)",
          "Details": "",
          "Suggest": "使用主机安全标准加固主机。",
          "Notice": ""
        },
        {
          "Id": "1.1.2",
          "Desc": "保持Docker版本更新 (不计评分)",
          "Details": "Using 19.03.13",
          "Suggest": "跟踪Docker发布并根据需要进行更新。",
          "Notice": "对Docker版本更新进行风险评估，了解它们可能会如何影响Docker操作。 请注意，有些使用Docker的第三方产品可能需要支持较老版本的Docker。"
        },
        {
          "Id": "1.2.1",
          "Desc": "为容器创建一个单独的分区 (计入评分)",
          "Details": "",
          "Suggest": "新安装docker时，为/var/lib/docker挂载点创建一个单独的分区。对于先前安装的系统，请使用逻辑卷管理器（LVM）创建分区。",
          "Notice": ""
        },
        {
          "Id": "1.2.2",
          "Desc": "只有受信任的用户才能控制 docker 守护进程  (计入评分)",
          "Details": "users: docker:x:991",
          "Suggest": "从docker组中删除任何不受信任的用户。 另外，请勿在主机上创建敏感目录到容器卷的映射。",
          "Notice": "作为普通用户构建和执行容器的权限将受到限制。"
        },
        {
          "Id": "1.2.3",
          "Desc": "审计docker守护进程 (计入评分)",
          "Details": "",
          "Suggest": "为Docker守护进程添加一条规则，例如，在/etc/audit/audit.rules文件中将该行添加到以下行中或者运行命令直接添加：auditctl -w /usr/bin/docker -k docker然后，重新启动审计守护进程。 例如server auditd restart。",
          "Notice": "审计生成相当大的日志文件。 确保定期归档它们。 另外，创建一个单独的审计分区以避免写满根文件系统。"
        },
        {
          "Id": "1.2.4",
          "Desc": "审计docker文件和目录-/var/lib/docker - /var/lib/docker (计入评分)",
          "Details": "",
          "Suggest": "为/var/lib/docker目录添加一条规则。 例如，将以下行添加到/etc/audit/audit.rules文件中：-w/var/lib/docker -k docker然后，重新启动审计守护进程。 例如service auditd restart。",
          "Notice": "审计生成相当大的日志文件。 确保定期归档它们。 另外，创建一个单独的审计分区以避免写满根文件系统。"
        },
        {
          "Id": "1.2.5",
          "Desc": "审计docker文件和目录 - /etc/docker (计入评分)",
          "Details": "",
          "Suggest": "为/etc/docker目录添加一条规则。 例如，在/etc/audit/audit.rules文件中添加如下所示的行-w /etc/docker -k docker然后，重新启动审计守护进程。 例如servise auditd restart。",
          "Notice": "审计生成相当大的日志文件。 确保定期归档它们。 另外，创建一个单独的审计分区以避免写满根文件系统。"
        },
        {
          "Id": "1.2.6",
          "Desc": "审计docker文件和目录 - docker.service (计入评分)",
          "Details": "",
          "Suggest": "如果该文件存在，请为其添加规则。例如，在/etc/audit/audit.rules文件中添加以下行：-w /usr/lib/systemd/system/docker.service -k docker然后，重新启动审计守护进程。 例如，servise auditd restart。",
          "Notice": "审计生成相当大的日志文件。 确保定期归档它们。 另外，创建一个单独的审计分区以避免写满根文件系统。"
        },
        {
          "Id": "1.2.7",
          "Desc": "审计docker文件和目录 - docker.socket (计入评分)",
          "Details": "",
          "Suggest": "如果文件存在，为其添加审计策略：. 在/etc/audit/audit.rules 文件添加一行: -w /usr/lib/systemd/system/docker.socket -k docker 然后重启审计进程：service auditd restart。",
          "Notice": "审计生成相当大的日志文件。 确保定期归档它们。 另外，创建一个单独的审计分区以避免写满根文件系统。"
        },
        {
          "Id": "1.2.8",
          "Desc": "审计docker文件和目录 - /etc/default/docker (计入评分)",
          "Details": "没有找到文件",
          "Suggest": "如果文件存在，为其添加审计策略在/etc/audit/audit.rules 文件添加一行-w /etc/default/docker -k dockerm 然后重启审计进程service auditd restart。",
          "Notice": "审计生成相当大的日志文件。 确保定期归档它们。 另外，创建一个单独的审计分区以避免写满根文件系统。"
        },
        {
          "Id": "1.2.9",
          "Desc": "审计docker文件和目录 - /etc/sysconfig/docker (计入评分)",
          "Details": "没有找到文件",
          "Suggest": " 在/etc/sysconfig/docker 文件添加规则。例如在 /etc/audit/audit.rules 文件中添加如下行: -w /etc/sysconfig/docker -k docker 然后，重新启动审计守护程序。 例如: service auditd restart",
          "Notice": "审计生成相当大的日志文件。 确保定期归档它们。 另外，创建一个单独的审计分区以避免写满根文件系统。"
        },
        {
          "Id": "1.2.10",
          "Desc": "审计docker文件和目录 - /etc/docker/daemon.json (计入评分)",
          "Details": "没有找到文件",
          "Suggest": "添加/etc/docker/daemon.json 文件的规则 例如在 /etc/audit/audit.rules文件中添加如下行-w /etc/docker/daemon.json -k docker 然后，重新启动审计守护程序。 例如service auditd restart。",
          "Notice": "审计生成相当大的日志文件。 确保定期归档它们。 另外，创建一个单独的审计分区以避免写满根文件系统。"
        },
        {
          "Id": "1.2.11",
          "Desc": "审计docker文件和目录 - /usr/bin/containerd (计入评分)",
          "Details": "没有找到文件",
          "Suggest": "跟踪Docker发布并根据需要进行更新。",
          "Notice": "审计生成相当大的日志文件。 确保定期归档它们。 另外，创建一个单独的审计分区以避免写满根文件系统。"
        },
        {
          "Id": "1.2.12",
          "Desc": "审计docker文件和目录 - /usr/sbin/runc (计入评分)",
          "Details": "没有找到文件",
          "Suggest": "跟踪Docker发布并根据需要进行更新。",
          "Notice": "审计生成相当大的日志文件。 确保定期归档它们。 另外，创建一个单独的审计分区以避免写满根文件系统。"
        }
      ]
    },
    {
      "Id": "2",
      "Desc": "Docker 守护进程安全配置",
      "Checks": [
        {
          "Id": "2.1",
          "Desc": "限制默认网桥上容器之间的网络流量 (计入评分)",
          "Details": "",
          "Suggest": "在守护进程模式下运行docker并传递--icc = false作为参数。例如，dockerd --icc = false 或者可以遵循Docker文档并创建自定义网络，并只加入需要与该自定义网络通信的容器。 --icc参数仅适用于默认Docker网桥，如果使用自定义网络，则应采用分段网络的方法。",
          "Notice": "默认网桥上的容器间通信将被禁用。 如果需要在同一主机上的容器之间进行通信，则需要使用容器链接来明确定义它，或者必须定义自定义网络。"
        },
        {
          "Id": "2.2",
          "Desc": "设置日志级别为info (计入评分)",
          "Details": "",
          "Suggest": "运行Docker守护进程如下： dockerd --log-level =“info”。",
          "Notice": ""
        },
        {
          "Id": "2.3",
          "Desc": "允许docker更改IPtables (计入评分)",
          "Details": "",
          "Suggest": "不要使用--iptables = false参数运行Docker守护程序。 例如，不要像下面那样启动Docker守护进程：dockerd --iptables = false。",
          "Notice": "Docker守护进程服务需要在启动之前启用iptables规则。 在Docker守护进程操作期间任何重新启动iptables都可能导致丢失docker创建的规则。 使用iptables-persistent持久iptables规则可以帮助减轻这种影响。"
        },
        {
          "Id": "2.4",
          "Desc": "不使用不安全的镜像仓库 (计入评分)",
          "Details": "",
          "Suggest": "不要使用任何不安全的镜像仓库。例如，不要像下面那样启动Docker守护进程：dockerd - insecure-registry 10.1.0.0/16。",
          "Notice": ""
        },
        {
          "Id": "2.5",
          "Desc": "不使用aufs存储驱动程序 (计入评分)",
          "Details": "",
          "Suggest": "不要刻意的使用aufs作为存储驱动。例如，不要启动Docker守护程序，如下所示：dockerd --storage-driver aufs。",
          "Notice": "aufs是允许容器共享可执行文件和共享库内存的存储驱动程序。 如果使用相同的程序或库运行数千个容器，可以选用。"
        },
        {
          "Id": "2.6",
          "Desc": "docker守护进程配置TLS身份认证 (计入评分)",
          "Details": "Docker守护进程未监听TCP",
          "Suggest": "按照Docker文档或其他参考中提到的步骤进行操作。",
          "Notice": "您需要管理和保护Docker守护程序和Docker客户端的证书和密钥。"
        },
        {
          "Id": "2.7",
          "Desc": "配置合适的ulimit (不计评分)",
          "Details": "默认的ulimit 似乎没有设置",
          "Suggest": "在守护进程模式下运行docker，并根据相应的ulimits传递'--default-ulimit'作为参数。例如：dockerd --default-ulimit nproc = 1024：2408 --default-ulimit nofile = 100：200。",
          "Notice": "如果ulimits未正确设置，则可能无法实现所需的资源控制，甚至可能导致系统无法使用。"
        },
        {
          "Id": "2.8",
          "Desc": "启用用户命名空间 (计入评分)",
          "Details": "",
          "Suggest": "可参考Docke文档了解具体的配置方式。 操作可能因平台而异例如，在Red Hat上，子UID和子GID映射创建不会自动工作。 必须手动创建映射。步骤如下：第1步：确保文件/etc/subuid和/etc/subgid存在 touch /etc/subuid/etc/subgid 第2步：使用--userns-remap标志启动docker守护进程dockerd dockerd --userns-remap = default。",
          "Notice": "注意用户命名空间重新映射使得不少Docker功能不兼容，可查看Docker文档和参考链接以获取详细信息。"
        },
        {
          "Id": "2.9",
          "Desc": "使用默认cgroup (计入评分)",
          "Details": "",
          "Suggest": "默认设置够用的话，可保留。 如果要特别设置非默认cgroup，在启动时将-cgroup-parent参数传递给docker守护程序。 例如，dockerd --cgroup-parent=/foobar。",
          "Notice": ""
        },
        {
          "Id": "2.10",
          "Desc": "设置容器的默认空间大小 (计入评分)",
          "Details": "",
          "Suggest": "如无需要，不要设置--storage-opt dm.basesize。",
          "Notice": ""
        },
        {
          "Id": "2.11",
          "Desc": "启用docker客户端命令的授权 (计入评分)",
          "Details": "",
          "Suggest": "第1步：安装/创建授权插件。第2步：根据需要配置授权策略。第3步：重启docker守护进程，如下所示：dockerd --authorization-plugin = <PLUGIN_ID>。",
          "Notice": "使用授权插件可能会导致性能下降。"
        },
        {
          "Id": "2.12",
          "Desc": "配置集中和远程日志记录 (计入评分)",
          "Details": "",
          "Suggest": "第1步：按照其文档设置所需的日志驱动程序。第2步：使用该日志记录驱动程序启动docker守护进程。例如，dockerd --log-driver = syslog --log-opt syslog-address = tcp：//192.xxx.xxx.xxx。",
          "Notice": ""
        },
        {
          "Id": "2.13",
          "Desc": "启用实时恢复 (计入评分)",
          "Details": "",
          "Suggest": "在守护进程模式下运行docker并传递--live-restore作为参数。 例如，dockerd --live-restore。",
          "Notice": ""
        },
        {
          "Id": "2.14",
          "Desc": "禁用userland代理 (计入评分)",
          "Details": "",
          "Suggest": "行Docker守护进程如下：dockerd --userland-proxy = false。",
          "Notice": "某些旧版Linux内核的系统可能无法支持DNAT，因此需要userland-prox服务。 此外，某些网络设置可能会因删除userland-prox而受到影响。"
        },
        {
          "Id": "2.15",
          "Desc": "应用守护进程范围的自定义seccomp配置文件 (不计评分)",
          "Details": "",
          "Suggest": "默认情况下，Docker使用默认seccomp配置文件。 如果这对当前环境有益，则不需要采取任何行动。 当然，也可以选择应用自己的seccomp配置文件，需在守护进程启动时使用--seccomp-profile标志，或将其放入守护程序运行时参数文件中。 dockerd --seccomp-profile </path/to/seccomp/profile>。",
          "Notice": "错误配置的seccomp配置文件可能会中断的容器运行。 Docker默认的策略兼容性很好，可以解决一些基本的安全问题。 所以，在重写默认值时，你应该非常小心。"
        },
        {
          "Id": "2.16",
          "Desc": "生产环境中避免实验性功能 (计入评分)",
          "Details": "",
          "Suggest": "不要将--experimental作为运行时参数传递给docker守护进程。",
          "Notice": ""
        },
        {
          "Id": "2.17",
          "Desc": "限制容器获取新的权限 (计入评分)",
          "Details": "",
          "Suggest": "运行Docker守护进程如下：dockerd --no-new-privileges。",
          "Notice": "no_new_priv会阻止像SELinux这样的LSM访问当前进程的进程标签。"
        },
        {
          "Id": "2.18",
          "Desc": "docker API暴露在外 (计入评分)",
          "Details": "",
          "Suggest": "未启用docker远程访问。",
          "Notice": "保证 docker API 的安全访问"
        }
      ]
    },
    {
      "Id": "3",
      "Desc": "Docker 守护进程文件权限配置",
      "Checks": [
        {
          "Id": "3.1",
          "Desc": "设置docker.service文件的所有权为 root:root (计入评分)",
          "Details": "",
          "Suggest": "步骤1：找出文件位置：systemctl show -p FragmentPath docker.service步骤2：如果该文件不存在，则此建议不适用。 如果文件存在，请使用正确的文件路径执行以下命令，将文件的所有权和组所有权设置为“root”。 例如，chown root:root /usr/lib/systemd/system/docker.service。",
          "Notice": ""
        },
        {
          "Id": "3.2",
          "Desc": "设置docker.service文件权限为644或更多限制性 (计入评分)",
          "Details": "",
          "Suggest": "步骤1：找出文件位置：systemctl show -p FragmentPath docker.service步骤2：如果该文件不存在，则此建议不适用。 如果文件存在，请使用正确的文件路径执行以下命令，将文件权限设置为'644'。 例如，chmod 644 /usr/lib/systemd/system/docker.service。",
          "Notice": ""
        },
        {
          "Id": "3.3",
          "Desc": "设置docker.socket文件所有权为 root:root (计入评分)",
          "Details": "",
          "Suggest": "步骤1：找出文件位置：systemctl show -p FragmentPath docker.socket。步骤2：如果该文件不存在，则此建议不适用。 如果文件存在，请使用正确的文件路径执行以下命令，将文件的所有权和组所有权设置为“root”。例如，chown root：root /usr/lib/systemd/system/docker.socket。",
          "Notice": ""
        },
        {
          "Id": "3.4",
          "Desc": "设置docker.socket文件权限为644或更多限制性 (计入评分)",
          "Details": "",
          "Suggest": "步骤1：找出文件位置：systemctl show -p FragmentPath docker.socket 步骤2：如果该文件不存在，则此建议不适用。 如果文件存在，请使用 正确的文件路径执行以下命令，将文件权限设置为644。例如，chmod 644 /usr/lib/systemd/system/docker.socket。",
          "Notice": ""
        },
        {
          "Id": "3.5",
          "Desc": "设置/etc/docker目录所有权为 root:root (计入评分)",
          "Details": "",
          "Suggest": "chown root：root /etc/docker这将将目录的所有权和组所有权设置为“root”。",
          "Notice": ""
        },
        {
          "Id": "3.6",
          "Desc": "chmod 755 /etc/docker这将把目录的权限设置为755。",
          "Details": "",
          "Suggest": "运行Docker守护进程如下：dockerd --no-new-privileges。",
          "Notice": ""
        },
        {
          "Id": "3.7",
          "Desc": "设置仓库证书文件所有权为root:root (计入评分)",
          "Details": "没有找到目录",
          "Suggest": "chown root：root /etc/docker/certs.d/<registry-name>/*这将将镜像仓库证书文件的所有权和组所有权设置为“root”。",
          "Notice": ""
        },
        {
          "Id": "3.8",
          "Desc": "设置仓库证书文件权限为444或更多限制性 (计入评分)",
          "Details": "没有找到目录",
          "Suggest": "“chmod 444 /etc/docker/certs.d/<registry-name>/*这会将镜像仓库证书文件的权限设置为444。",
          "Notice": ""
        },
        {
          "Id": "3.9",
          "Desc": "设置TLS CA证书文件所有权为root:root (计入评分)",
          "Details": "No TLS CA certificate found",
          "Suggest": "chown root：root <路径到TLS CA证书文件>这将TLS CA证书文件的所有权和组所有权设置为“root”。",
          "Notice": ""
        },
        {
          "Id": "3.10",
          "Desc": "设置TLS CA证书文件权限为444或更多限制性 (计入评分)",
          "Details": "没找到TLS CA证书文件",
          "Suggest": "chmod 444 <路径到TLS CA证书文件>这将把TLS CA文件的文件权限设置为444。",
          "Notice": ""
        },
        {
          "Id": "3.11",
          "Desc": "设置docker服务器证书文件所有权为root:root (计入评分)",
          "Details": "没有找到TLS服务器证书文件",
          "Suggest": "“chown root:root <路径到Docker服务器证书文件>这将Docker服务器证书文件的所有权和组所有权设置为“root”。",
          "Notice": ""
        },
        {
          "Id": "3.12",
          "Desc": "设置docker服务器证书文件权限为444或更多限制 (计入评分)",
          "Details": "没有找到TLS服务器证书文件",
          "Suggest": "chmod 444 <路径到Docker服务器证书文件>这将把Docker服务器文件的文件权限设置为444。",
          "Notice": ""
        },
        {
          "Id": "3.13",
          "Desc": "设置docker服务器证书密钥文件所有权为 root:root (计入评分)",
          "Details": "没有找到TLS Key",
          "Suggest": "chown root:root <路径到Docker服务器证书密钥文件>这将将Docker服务器证书密钥文件的所有权和组所有权设置为“root”。",
          "Notice": ""
        },
        {
          "Id": "3.14",
          "Desc": "设置docker服务器证书密钥文件权限为400 (计入评分)",
          "Details": "没有找到TLS Key",
          "Suggest": "chmod 400 <路径到Docker服务器证书密钥文件>这将Docker服务器证书密钥文件权限设置为“400”。",
          "Notice": ""
        },
        {
          "Id": "3.15",
          "Desc": "设置docker.sock文件所有权为 root:docker (计入评分)",
          "Details": "",
          "Suggest": "chown root：docker /var/run/docker.sock这将将所有权设置为“root”和组所有权到“docker”作为默认Docker套接字文件。",
          "Notice": ""
        },
        {
          "Id": "3.16",
          "Desc": "设置docker.sock文件权限为660或更多限制性 (计入评分)",
          "Details": "",
          "Suggest": "chmod 660 /var/run/docker.sock这会将Docker套接字文件的文件权限设置为660。",
          "Notice": ""
        },
        {
          "Id": "3.17",
          "Desc": "设置daemon.json文件所有权为 root:root (计入评分)",
          "Details": "没有找到文件",
          "Suggest": "chown root：root /etc/docker/daemon.json这将将文件的所有权和组所有权设置为“root”。",
          "Notice": ""
        },
        {
          "Id": "3.18",
          "Desc": "设置daemon.json文件权限为644或更多限制性 (计入评分)",
          "Details": "没有找到文件",
          "Suggest": "chmod 644 /etc/docker/daemon.json这将把该文件的文件权限设置为644。",
          "Notice": ""
        },
        {
          "Id": "3.19",
          "Desc": "设置/etc/default/docker文件所有权为 root:root (计入评分)",
          "Details": "没有找到文件",
          "Suggest": "chown root:root /etc/default/docker这将文件的所有权和组所有权设置为“root”。",
          "Notice": ""
        },
        {
          "Id": "3.20",
          "Desc": "设置/etc/default/docker文件权限为644或更多限制性 root:root (计入评分)",
          "Details": "没有找到文件",
          "Suggest": "chmod 644 /etc/default/docker这将把该文件的文件权限设置为644。",
          "Notice": ""
        },
        {
          "Id": "3.21",
          "Desc": "设置/etc/sysconfig/docker的文件权限为644或更多的限制性 (计入评分)",
          "Details": "没有找到文件",
          "Suggest": "chmod 644 /etc/sysconfig/docker。这将把该文件的文件权限设置为 644.",
          "Notice": ""
        },
        {
          "Id": "3.22",
          "Desc": "设置/etc/default/docker的文件权限为644或更多的限制性 (计入评分)",
          "Details": "没有找到文件",
          "Suggest": "chmod 644 /etc/default/docker。这将把该文件的文件权限设置为 644",
          "Notice": ""
        }
      ]
    },
    {
      "Id": "4",
      "Desc": "容器镜像和构建文件",
      "Checks": [
        {
          "Id": "4.1",
          "Desc": "创建容器的用户 (计入评分)",
          "Details": "以root用户运行:  zen_nash diss-metric rancher-server",
          "Suggest": "确保容器镜像的Dockerfile包含以下指令：USER <用户名或ID> 其中用户名或ID是指可以在容器基础镜像中找到的用户。 如果在容器基础镜像中没有创建特定用户，则在USER指令之前添加useradd命令以添加特定用户。例如，在Dockerfile中创建用户：RUN useradd -d /home/username -m -s /bin/bash username USER username注意：如果镜像中有容器不需要的用户，请考虑删除它们。 删除这些用户后，提交镜像，然后生成新的容器实例以供使用。",
          "Notice": ""
        },
        {
          "Id": "4.2",
          "Desc": "容器使用可信的基础镜像 (不计评分)",
          "Details": "",
          "Suggest": "配置和使用Docker内容信任。检查Docker镜像历史记录以评估其在网络上运行的风险。扫描Docker镜像以查找其依赖关系中的漏洞。",
          "Notice": ""
        },
        {
          "Id": "4.3",
          "Desc": "容器中不安装没有必要的软件包 (不计评分)",
          "Details": "",
          "Suggest": "如果可能的话，考虑使用最小基本镜像而不是标准的Redhat/Centos/Debian镜像。 可以选择BusyBox和Alpine。这不仅可以将您的镜像大小从> 150Mb修剪至20 Mb左右，还可以使用更少的工具和路径来提升权限。",
          "Notice": ""
        },
        {
          "Id": "4.4",
          "Desc": "扫描镜像漏洞并且构建包含安全补丁的镜像 (不计评分)",
          "Details": "",
          "Suggest": "按照以下步骤重新构建带有安全补丁的镜像：第1步：取出所有基本镜像（即给定一组Dockerfiles，提取在FROM指令中声明的所有镜像，并重新提取它们以检查更新/修补版本）第2步：强制重建每个镜像：docker build --no-cache第3步：使用更新的镜像重新启动所有容器。还可以在Dockerfile中使用ONBUILD指令来触发经常用作基本镜像的特定更新指令。",
          "Notice": ""
        },
        {
          "Id": "4.5",
          "Desc": "启用 docker 内容信任 (计入评分)",
          "Details": "",
          "Suggest": "要在bash shell中启用内容信任，请输入以下命令：export DOCKER_CONTENT_TRUST = 1或者，在配置文件中设置此环境变量，以便每次登录时启用内容信任。",
          "Notice": "在设置了DOCKER_CONTENT_TRUST的环境中，需要在处理镜像时遵循信任过程 - 构建，创建，拉取，推送和运行。 可以使用--disable-content-trust标志按照需要在标记镜像上运行单独的操作，一般用于测试目的，生成环境中应尽不要使用。"
        },
        {
          "Id": "4.6",
          "Desc": "将 HEALTHCHECK 说明添加到容器镜像 (计入评分)",
          "Details": "没有安全检查的镜像:  [registry.cn-qingdao.aliyuncs.com/diss/diss-metric:latest] [registry.cn-qingdao.aliyuncs.com/diss/amclean:latest] [openstack001/poc01:0.1] [registry.cn-qingdao.aliyuncs.com/diss/kube-bench:latest] [rancher/rancher:latest] [weaveworks/cloud-agent:diss-7896ed59 weaveworks/cloud-agent:latest] [weaveworks/cloud-agent:diss-7896ed59 weaveworks/cloud-agent:latest] [weaveworks/scope:1.13.1] [golang:1.14.2] [node:10.19] [alpine:3.11.3 alpine:3.11.3] [alpine:3.11.3 alpine:3.11.3] [weaveworks/weaveexec:2.1.3]",
          "Suggest": "按照Docker文档，并使用HEALTHCHECK指令重建容器镜像。",
          "Notice": ""
        },
        {
          "Id": "4.7",
          "Desc": "不在 dockerfile 中单独使用更新命令 (不计评分)",
          "Details": "发现更新指令:  [registry.cn-qingdao.aliyuncs.com/diss/diss-metric:latest] [registry.cn-qingdao.aliyuncs.com/diss/diss_probe:1.2.6.14] [registry.cn-qingdao.aliyuncs.com/diss/diss_probe:1.2.6.13] [registry.cn-qingdao.aliyuncs.com/diss/diss_probe:1.2.6.11] [registry.cn-qingdao.aliyuncs.com/diss/diss_probe:1.2.6.8] [registry.cn-qingdao.aliyuncs.com/diss/amclean:latest] [rancher/rancher:latest] [golang:1.14.2] [node:10.19] [weaveworks/weaveexec:2.1.3]",
          "Suggest": "在安装软件包时，请使用最新的固定版本软件包。或可以在docker构建过程中使用--no-cache标志，以避免使用缓存的层。",
          "Notice": ""
        },
        {
          "Id": "4.8",
          "Desc": "镜像中删除 setuid 和 setgid 权限 (不计评分)",
          "Details": "",
          "Suggest": "只在需要可执行的文件上允许setuid和setgid权限。 可在构建时通过在Dockerfile中添加以下命令来删除这些权限，最好添加在Dockerfile的末尾：RUN find / -perm +6000-type f -exec chmod a-s {} -;|| true。",
          "Notice": "以上命令会导致依赖setuid或setgid权限（包括合法权限）的可执行文件无法执行，需要小心处理。"
        },
        {
          "Id": "4.9",
          "Desc": "在 dockerfile 中使用 COPY 而不是 ADD  (不计评分)",
          "Details": "使用了ADD的镜像:  [weaveworks/weaveexec:2.1.3]",
          "Suggest": "在Dockerfiles中使用COPY指令。",
          "Notice": "可能需ADD指令提供的功能，例如从远程URL获取文件。"
        },
        {
          "Id": "4.10",
          "Desc": "涉密信息不存储在 Dockerfiles (不计评分)",
          "Details": "",
          "Suggest": "不要在Dockerfiles中存储任何类型的涉密信息。",
          "Notice": "若必须使用，需要制定相应的措施。"
        },
        {
          "Id": "4.11",
          "Desc": "仅安装已经验证的软件包 (不计评分)",
          "Details": "",
          "Suggest": "使用GPG密钥下载和验证您所选择的软件包或任何其他安全软件包分发机制。",
          "Notice": ""
        }
      ],
      "INFO": 2,
      "WARN": 3,
      "PASS": 0,
      "NOTE": 6
    },
    {
      "Id": "5",
      "Desc": "容器运行时保护",
      "Checks": [
        {
          "Id": "5.1",
          "Desc": "启用 AppArmor 配置文件 (计入评分)",
          "Details": "没有 AppArmorProfile 的容器:  zen_nash diss-metric rancher-server",
          "Suggest": "如果AppArmor适用于你的Linux操作系统，可能需要遵循以下步骤：1.验证是否安装了AppArmor。 如果没有，请安装。2.为Docker容器创建或导入AppArmor配置文件。3.将此配置文件置于强制模式。4.使用自定义的AppArmor配置文件启动Docker容器。 例如，docker run --interactive --tty --security-opt =“apparmor：PROFILENAME”centos/bin/bash或者，可以保留Docker的默认apparmor配置文件。",
          "Notice": "AppArmor配置文件中定义的一组操作限制。 如果配置错误，容器可能无法完成工作。"
        },
        {
          "Id": "5.2",
          "Desc": "设置 SElinux 安全选项 (计入评分)",
          "Details": "没有发现 SecurityOptions 的容器:  rancher-server",
          "Suggest": "如果SELinux适用于你的Linux操作系统，请使用它。 可能需要遵循以下步骤： 1.设置SELinux状态。 2.设置SELinux策略。 3.为Docker容器创建或导入SELinux策略模板。 4.启用SELinux的守护程序模式下启动Docker。 例如，docker daemon --selinux-enabled 5.使用安全选项启动Docker容器。 例如，docker run--interactive --tty --security-opt label = level：TopSecret centos/bin/bash。",
          "Notice": "selinux配置文件中定义的一组操作限制。 如果配置错误，容器可能无法完成工作。"
        },
        {
          "Id": "5.3",
          "Desc": "linux 内核功能在容器内受限 (计入评分)",
          "Details": "添加了内核级功能的容器:  zen_nash",
          "Suggest": "执行以下命令添加所需的功能： $> docker run --cap-add = {“Capability 1”，“Capability 2”} 例如，docker run --interactive --tty --cap-add = {“NET_ADMIN”，“SYS_ADMIN”} centos：latest /bin/bash 执行以下命令删除不需要的功能： $> docker run --cap-drop = {“能力1”，“能力2”} 例如，docker run --interactive --tty --cap-drop = {“SETUID”，“SETGID”} centos：latest /bin/bash 或者， 您可以选择删除所有功能并只添加所需功能： $> docker run --cap-drop = all --cap-add = {“Capability 1”，“Capability 2”} 例如，docker run --interactive --tty --cap-drop = all --cap-add = {“NET_ADMIN”，“SYS_ADMIN”} centos：latest /bin/bash。",
          "Notice": "基于添加或删除的Linux内核功能，容器中功能会受到限制。"
        },
        {
          "Id": "5.4",
          "Desc": "不使用特权容器 (计入评分)",
          "Details": "运行在特权模式的容器:  diss-metric",
          "Suggest": "不要运行带有--privileged标志的容器。 例如，不要启动如下容器：docker run --interactive --tty --privileged centos/bin/bash。",
          "Notice": "除默认值之外的Linux内核功能将无法在容器内使用。"
        },
        {
          "Id": "5.5",
          "Desc": "敏感的主机系统目录未挂载在容器上 (计入评分)",
          "Details": "挂载敏感目录的容器:  diss-metric:/",
          "Suggest": "不要将主机敏感目录挂载在容器上，尤其是在读写模式下。",
          "Notice": ""
        },
        {
          "Id": "5.6",
          "Desc": "sshd不在容器中运行 (计入评分)",
          "Details": "sshd/docker exec执行失败的容器:  zen_nash",
          "Suggest": "从容器中卸载SSH服务器，并使用nsenter或其他任何命令（如docker exec或docker attach）与容器实例进行交互。 docker exec --interactive --tty $ INSTANCE_ID sh OR docker attach 。",
          "Notice": ""
        },
        {
          "Id": "5.7",
          "Desc": "特权端口禁止映射到容器内 (计入评分)",
          "Details": "使用特权端口的容器:  rancher-server:443 rancher-server:80",
          "Suggest": "启动容器时，不要将容器端口映射到特权主机端口。 另外，确保没有容器在Docker文件中特权端口映射声明。",
          "Notice": ""
        },
        {
          "Id": "5.8",
          "Desc": "只映射必要的端口只映射必要的端口 (不计评分)",
          "Details": "",
          "Suggest": "修复容器镜像的Dockerfile，以便仅通过容器化应用程序公开所需的端口。 也可以通过在启动容器时不使用-P（UPPERCASE）或--publish-all标志来完全忽略Dockerfile中定义的端口列表。 使用-p（小写）或--publish标志来明确定义特定容器实例所需的端口。 例如，docker run --interactive --tty --publish 5000 - publish 5001 - publish 5002 centos/bin/bash。",
          "Notice": ""
        },
        {
          "Id": "5.9",
          "Desc": "不共享主机的网络命名空间 (计入评分)",
          "Details": "运行在 host 网络模式的容器:  zen_nash diss-metric",
          "Suggest": "启动容器时不要通过--net = host选项。",
          "Notice": ""
        },
        {
          "Id": "5.10",
          "Desc": "确保容器的内存使用合理 (计入评分)",
          "Details": "没有做内存限制的容器:  zen_nash diss-metric rancher-server",
          "Suggest": "建议使用--memory参数运行容器。 例如，可以运行一个容器如下： docker run --interactive --tty --memory 256m centos/bin/bash 在上面的示例中，容器启动时的内存限制为256 MB。 值得注意的是，如果存在内存限制，下面命令的输出将以科学计数形式返回值。 docker inspect --format ={{。Config.Memory}}7c5a2d4c7fe0 例如，如果上述容器实例的内存限制设置为256 MB，则上述命令的输出将为2.68435456e + 08而不是256m。 应该使用科学计算器或编程方法来转换此值。",
          "Notice": "如果您有设置适当的限制，容器可能将无法使用。"
        },
        {
          "Id": "5.11",
          "Desc": "正确设置容器上的 CPU 优先级 (计入评分)",
          "Details": "没有做CPU限制的容器:  zen_nash diss-metric rancher-server",
          "Suggest": "管理容器之间的CPU份额。为此，请使用--cpu-shares参数启动容器。 例如，可以运行一个容器，如下所示： docker run --interactive --tty --cpu-shares 512 centos/bin/bash 在上面的示例中，容器以其他容器使用的50％的CPU份额启动。因此，如果另一个容器的CPU份额为80％，则此容器的CPU份额为40％。 注意：默认情况下，每个新容器将拥有1024个CPU份额。但是，如果运行审计部分中提到的命令，则此值显示为0。 或者使用如下方法： 1.进入/sys/fs/cgroup/cpu/system.slice/目录。 2.使用docker ps检查容器实例ID。 3.在上面的目录中（在步骤1中），将有一个名称为docker- <Instance ID> .scope的目录。例如，docker-4acae729e8659c6be696ee35b2237cc1fe4edd2672e9186434c5116e1a6fbed6.scope。进入此目录。 4.可以找到一个名为cpu.shares的文件。执行cat cpu.shares。可以看到CPU的份额值。因此，在docker run命令中没有使用-c或--cpu-shares参数配置CPU共享，该文件的值为1024。 如果我们将一个容器的CPU份额设置为512，则与其他容器相比，它将获得一半的CPU时间。因此，以1024作为100％，然后快速计算数据以得出您应为各个CPU份额设置的数字。例如，如果您想设置50％，则使用512;如果您想设置25％，则使用256。",
          "Notice": "如果没有设置适当的CPU共享，容器进程可能会不能执行。 但主机上的CPU资源是空闲的，CPU共享不会对容器可能使用的CPU造成任何限制。"
        },
        {
          "Id": "5.12",
          "Desc": "设置容器的根文件系统为只读 (计入评分)",
          "Details": "根文件系统挂载为读写的容器:  zen_nash diss-metric rancher-server",
          "Suggest": "在容器的运行时添加一个只读标志以强制容器的根文件系统以只读方式装入。 docker run <Run arguments> - read-only <Container Image Name or ID> <Command> 在容器的运行时启用只读选项，包括但不限于如下： 1.使用--tmpfs选项为非持久数据写入临时文件系统。 docker run --interactive --tty --read-only --tmpfs/run--tmpfs/tmpcentos/bin/bash 2.启用Docker rw在容器的运行时载入，以便将容器数据直接保存在Docker主机文件系统上。  docker run --interactive --tty --read-only -v /opt/app/data/run/app/data：rw centos/bin/bash 3.使用Docker共享存储卷插件来存储Docker数据卷以保留容器数据。 docker volume create -d convoy --opt o=size=20GB my-named-volume docker run --interactive --tty --read-only -v my-named-volume：/run/app/data centos/bin/bash 4.在容器运行期间，将容器数据传输到容器外部，以便保持容器数据。包括托管数据库，网络文件共享和API。",
          "Notice": "如果未定义数据写入策略，则在容器运行时启用--read-only可能会破坏某些容器软件包。 定义容器的数据应该在运行时保持不变，以确定要使用哪个建议过程。例： ·启用--tmpfs将临时文件写入到/tmp ·使用Docker共享数据卷进行持久数据写入"
        },
        {
          "Id": "5.13",
          "Desc": "确保进入容器的流量绑定到特定的主机接口 (计入评分)",
          "Details": "一些容器的端口绑定了不做限定的IP:  rancher-server:0.0.0.0 rancher-server:0.0.0.0",
          "Suggest": "将容器端口绑定到所需主机端口上的特定主机接口。 例如，docker run--detach --publish 10.2.3.4:49153:80 nginx 在上面的示例中，容器端口80绑定到49153上的主机端口，并且仅接受来自10.2.3.4外部接口的传入连接。",
          "Notice": ""
        },
        {
          "Id": "5.14",
          "Desc": "容器重启策略 on-failure 设置为 5  (计入评分)",
          "Details": "最大重试次数没有设置为 5 的容器:  zen_nash diss-metric rancher-server",
          "Suggest": "如果一个容器需要自己重新启动，可以如下设置： docker run --detach --restart = on-failure:5 nginx。",
          "Notice": "容器只会尝试重新启动5次。"
        },
        {
          "Id": "5.15",
          "Desc": "确保主机的进程命名空间不共享 (计入评分)",
          "Details": "一些容器的主机PID命名空间被共享:  zen_nash",
          "Suggest": "不要使用'--pid = host'参数启动容器。 例如，不要启动一个容器，如下所示： docker run --interactive --tty --pid = host centos/bin/bash。",
          "Notice": "注意：容器进程无法看到主机系统上的进程。 在某些情况下，可能需要容器共享主机的进程命名空间。 例如，可以使用像strace或gdb这样的调试工具构建容器，在调试容器中的进程时要使用这些工具。 如必要，最好只能使用“-p”参数共享必须的主机进程。 例如，docker run --pid = host rhel7 strace -p 1234。"
        },
        {
          "Id": "5.16",
          "Desc": "主机的 IPC 命令空间不共享 (计入评分)",
          "Details": "",
          "Suggest": "不要使用'--ipc = host'参数启动容器。 例如，不要启动如下容器：docker run --interactive --tty --ipc = host centos/bin/bash。",
          "Notice": "注意：共享内存段用于加速进程间通信。 它通常被高性能应用程序使用。 如果这些应用程序被容器化为多个容器，则可能需要共享容器的IPC名称空间以实现高性能。 在这种情况下，您仍然应该共享容器特定的IPC 命名空间而不是整个主机IPC命名空间。 可以将容器的IPC名称空间与另一个容器共享，如下所示： 例如，docker run --interactive --tty --ipc = container：e3a7a1a97c58 centos/bin/bash。"
        },
        {
          "Id": "5.17",
          "Desc": "主机设备不直接共享给容器 (不计评分)",
          "Details": "",
          "Suggest": "不要将主机设备直接共享于容器。 如果必须将主机设备共享给容器，请使用正确的一组权限： 例如，不要启动一个容器，如下所示： docker run --interactive --tty --device=/dev/tty0:/dev/tty0：rwm --device=/dev/temp_sda:/dev/temp_sda：rwm centos bash 例如，以正确的权限共享主机设备： docker run --interactive --tty --device=/dev/tty0:/dev/tty0：rw --device=/dev/temp_sda:/dev/temp_sda：r centos bash。",
          "Notice": "将无法直接在容器内使用主机设备。"
        },
        {
          "Id": "5.18",
          "Desc": "设置默认的 ulimit 配置（在需要时） (不计评分)",
          "Details": "容器没有设置ulimit默认值:  zen_nash diss-metric rancher-server",
          "Suggest": "如果需要，覆盖默认的ulimit设置。 例如，要覆盖默认的ulimit设置，请启动一个容器，如下所示： docker run --ulimit nofile = 1024：1024 --interactive --tty centos/bin/bash。",
          "Notice": "如果ulimits未正确设置，则可能无法实现所需的资源控制，甚至导致系统无法使用。"
        },
        {
          "Id": "5.19",
          "Desc": "设置装载传播模式不共享 (计入评分)",
          "Details": "",
          "Suggest": "不建议以共享模式传播中安装卷。 例如，不要启动容器，如下所示：docker run <Run arguments> --volume=/hostPath:/containerPath:shared <Container Image Name or ID> <Command>。。",
          "Notice": ""
        },
        {
          "Id": "5.20",
          "Desc": "设置主机的 UTS 命令空间不共享 (计入评分)",
          "Details": "",
          "Suggest": "不要使用--uts = host参数启动容器。 例如，不要启动如下容器：docker run --rm --interactive --tty --uts = host rhel7.2。",
          "Notice": ""
        },
        {
          "Id": "5.21",
          "Desc": "默认的 seccomp 配置文件未禁用 (计入评分)",
          "Details": "",
          "Suggest": "默认情况下，seccomp配置文件处于启用状态。除非您要修改和使用修改后的seccomp配置文件，否则您无需执行任何操作。",
          "Notice": "注意：在Docker 1.10及更高版本中，不管是否将-cap-add参数传递给容器，默认的seccomp配置文件都会阻止系统调用。在这种情况下，您应该创建自己的自定义seccomp配置文件。您还可以通过在docker run上传递--securityopt=seccomp:unconfined来禁用默认的seccomp配置文件。"
        },
        {
          "Id": "5.22",
          "Desc": "docker exec 命令不能使用特权选项n (计入评分)",
          "Details": "",
          "Suggest": "在docker exec命令中不要使用--privileged选项。",
          "Notice": "如果您需要容器内的增强功能，则只运行具有所需功能的容器。"
        },
        {
          "Id": "5.23",
          "Desc": "docker exec 命令不能与 uuser=root 选项一起使用 (不计评分)",
          "Details": "",
          "Suggest": "在docker exec命令中不要使用--user选项。",
          "Notice": ""
        },
        {
          "Id": "5.24",
          "Desc": "确保 cgroug 安全使用 (计入评分)",
          "Details": "",
          "Suggest": "如无必须，不要使用 --cgroup-parent 选项在docker运行。",
          "Notice": ""
        },
        {
          "Id": "5.25",
          "Desc": "限制容器获得额外的权限 (计入评分)",
          "Details": "这些容器的权限没有做限定:  zen_nash diss-metric rancher-server",
          "Suggest": "例如，应该按如下启动容器：docker run --rm -it --security-opt = no-new-privileges ubuntu bash。",
          "Notice": "no_new_priv会阻止像SELinux这样的LSM变为不允许访问当前进程的进程标签。"
        },
        {
          "Id": "5.26",
          "Desc": "运行时检查容器健康状态 (计入评分)",
          "Details": "这些容器没有设置健康检查:  diss-metric rancher-server",
          "Suggest": "使用--health-cmd和其他参数运行容器。 例如，docker run -d --health-cmd ='stat /etc/passwd || exit1'nginx。",
          "Notice": ""
        },
        {
          "Id": "5.27",
          "Desc": "确保 docker 命令始终获取最新版本的镜像 (不计评分)",
          "Details": "",
          "Suggest": "使用正确的版本锁定机制（默认情况下分配的最新标签仍然不完善），避免提取缓存的旧版本。 版本固定机制也应用于基本镜像，软件包和整个镜像。 可以根据要求定制版本固定规则。",
          "Notice": ""
        },
        {
          "Id": "5.28",
          "Desc": "限制使用 PID cgroup (计入评分)",
          "Details": "这些容器没有设置PID限制:  zen_nash diss-metric rancher-server",
          "Suggest": "在启动容器时，使用--pids-limit标志。例如，docker run -it -pids-limit 100 <Image_ID> 在上述示例中，允许在任何给定时间运行的进程数设置为100.在达到100个并发运行进程的限制之后，docker将限制任何新的进程创建。",
          "Notice": "根据需要设置PID限制值。 不正确的值可能会使容器不能使用。"
        },
        {
          "Id": "5.29",
          "Desc": "不要使用 docker 的默认网桥 docker0 (不计评分)",
          "Details": "使用了docker0网络的容器:  02fbf1b12e67d268bdd7ab246b127d63e6d1b2a15d02855903bae40622630a1a:rancher-server",
          "Suggest": "遵循Docker文档并设置用户定义的网络。 运行定义的网络中的所有容器。",
          "Notice": "必须管理用户定义的网络。"
        },
        {
          "Id": "5.30",
          "Desc": "不共享主机的用户命名空间 (计入评分)",
          "Details": "",
          "Suggest": "不要在主机和容器之间共享用户名称空间。 例如，不要像下面那样运行容器： docker run --rm -it --userns = host ubuntu bash。",
          "Notice": ""
        },
        {
          "Id": "5.31",
          "Desc": "任何容器内不能安装 docker 套接字 (计入评分)",
          "Details": "共享了Docker套接字的容器:  zen_nash diss-metric",
          "Suggest": "确保没有容器将docker.sock作为卷。",
          "Notice": ""
        }
      ]
    },
    {
      "Id": "6",
      "Desc": "Docker 安全操作",
      "Checks": [
        {
          "Id": "6.1",
          "Desc": "避免镜像泛滥 (不计评分)",
          "Details": "6 活跃的/16 使用中的",
          "Suggest": "保留您实际需要的一组镜像，并建立工作流程以从主机中删除陈旧的镜像。 此外，使用诸如按摘要的功能从镜像仓库中获取特定镜像。 可以按照以下步骤找出系统上未使用的镜像并删除它们。 步骤1通过执行以下命令列出当前实例化的所有镜像ID： docker images --quiet | xargs docker inspect --format'{{.Id}}：Image = {{.Config.Image}}' 步骤2：通过执行以下命令列出系统中存在的所有镜像：docker images 步骤3：比较步骤1和步骤2中填充的镜像ID列表，找出当前未实例化的镜像。 第4步：决定是否要保留当前未使用的镜像。 如果不通过执行以下命令删除它们：docker rmi $ IMAGE_ID。",
          "Notice": ""
        },
        {
          "Id": "6.2",
          "Desc": "避免容器泛滥 (不计评分)",
          "Details": "6 容器总数/4 运行中的",
          "Suggest": "定期检查每个主机的容器清单，并使用以下命令清理已停止的容器：docker container prune。",
          "Notice": "如果你每个主机的容器数量太少，那么你可能没有充分利用你的主机资源。"
        }
      ]
    },
    {
      "Id": "7",
      "Desc": "Docker 集群配置",
      "Checks": [
        {
          "Id": "7.1",
          "Desc": "必要时不启用群集模式 (计入评分)",
          "Details": "",
          "Suggest": "如果在系统出错时启用了集群模式，请停用。",
          "Notice": ""
        },
        {
          "Id": "7.2",
          "Desc": "在群集中最小数量创建管理器节点 (计入评分)",
          "Details": "",
          "Suggest": "如果配置的管理节点数量过多，则可以使用以下命令将超出部分作为节点降级： docker node demote <ID>。",
          "Notice": ""
        },
        {
          "Id": "7.3",
          "Desc": "群集服务绑定到特定的主机接口 (计入评分)",
          "Details": "",
          "Suggest": "对此操作需要重新初始化集群，以指定--listen-addr参数的特定接口。",
          "Notice": ""
        },
        {
          "Id": "7.4",
          "Desc": "数据在的不同节点上进行加密 (计入评分)",
          "Details": "",
          "Suggest": "使用--opt加密标志创建网络。",
          "Notice": ""
        },
        {
          "Id": "7.5",
          "Desc": "管理 Swarm 集群中的涉密信息 (不计评分)",
          "Details": "",
          "Suggest": "按照docker秘密管理方法，并用它来有效管理秘密。",
          "Notice": ""
        },
        {
          "Id": "7.6",
          "Desc": "swarm manager 在自动锁定模式下运行 (计入评分)",
          "Details": "",
          "Suggest": "如果正在初始化swarm，使用下面的命令。 docker swarm init --autolock 如果想在现有的swarm manager节点上设置--autolock，请使用以下命令。 Docker swarm update --autolock。",
          "Notice": "在自动锁定模式下的群体不会从重新启动恢复，需用户手动干预以输入解锁密钥。 在某些部署中，这可能不是很方便。"
        },
        {
          "Id": "7.7",
          "Desc": "swarm manager 自动锁定秘钥周期性轮换 (不计评分)",
          "Details": "",
          "Suggest": "运行以下命令来更换。 Docker swarm unlock-key --rotate 此外，为了便于审计，维护密钥轮换记录并确保为密钥轮换符合规定周期。",
          "Notice": ""
        },
        {
          "Id": "7.8",
          "Desc": "节点证书适当轮换 (不计评分)",
          "Details": "",
          "Suggest": "运行以下命令来设置所需的到期时间。 例如，docker swarm update--cert-expiry 48h。",
          "Notice": ""
        },
        {
          "Id": "7.9",
          "Desc": "CA 根证书根据需要进行轮换 (不计评分)",
          "Details": "",
          "Suggest": "运行以下命令来更换证书。 Docker swarm ca - rotate。",
          "Notice": ""
        },
        {
          "Id": "7.10",
          "Desc": "管理平面流量分流自数据平面流量 (不计评分)",
          "Details": "",
          "Suggest": "分别用管理数据系统和业务数据系统的专用接口初始化Swarm。 例如，docker swarm init --advertise-addr = 192.168.0.1 --data-path-addr = 17.1.0.3",
          "Notice": "需要每个节点2个网络接口卡。"
        }
      ]
    },
    {
      "Id": "8",
      "Desc": "Docker 企业版配置",
      "Checks": []
    }
  ]
}